@page "/game/{RoomId}"
@using Microsoft.AspNetCore.SignalR.Client
@using Microsoft.AspNetCore.WebUtilities
@using RockPaperScissorsGame.Models
@rendermode InteractiveWebAssembly
@inject NavigationManager NavigationManager
@inject IJSRuntime JSRuntime
@implements IAsyncDisposable

<div class="container py-5">
    <div class="row">
        <div class="col-md-8 col-lg-6">
            <div class="card shadow-lg rounded-4">
                <div class="card-body">

                    <div class="d-flex align-items-center mb-4 p-3 bg-light rounded-3 shadow-sm">
                        <span class="fs-1 me-3" style="width: 3rem; height: 3rem; display: flex; align-items: center; justify-content: center;">
                            @_playerAvatar
                        </span>
                        <div>
                            <div class="fw-bold text-primary fs-4">@_playerName</div>
                            <div class="text-muted small">You</div>
                        </div>
                    </div>

                    <h2 class="card-title text-center mb-4 text-primary fw-bold">Game Room: @RoomId</h2>

                    @if (!_isConnected)
                    {
                        <div class="d-flex flex-column align-items-center py-4">
                            <div class="spinner-border text-primary mb-3" role="status"></div>
                            <p class="text-muted fs-5">Connecting...</p>
                        </div>
                    }
                    else if (_isRoomFull)
                    {
                        <div class="alert alert-danger text-center">Room is full</div>
                    }
                    else if (_opponentLeft)
                    {
                        <div class="alert alert-warning text-center">Opponent has left the game.</div>
                    }
                    else if (string.IsNullOrWhiteSpace(_playerName) || string.IsNullOrWhiteSpace(_playerAvatar))
                    {
                        <div class="alert alert-info text-center">Please provide your name and avatar in the lobby.</div>
                    }
                    else if (!_isOpponentJoined)
                    {
                        <div class="d-flex flex-column align-items-center py-4">
                            <div class="text-muted fs-5 mb-2">Waiting for opponent to join...</div>
                        </div>
                    }
                    else if (!_hasPlayerMoved)
                    {
                        <div class="text-center mb-3">
                            <p class="fs-5 fw-semibold mb-3">Choose your move:</p>
                            <div class="d-flex justify-content-center gap-3 flex-wrap">
                                <button class="btn btn-lg btn-outline-primary px-4" @onclick="() => MakeMove(Move.Rock)">ü™® Rock</button>
                                <button class="btn btn-lg btn-outline-success px-4" @onclick="() => MakeMove(Move.Paper)">üìÑ Paper</button>
                                <button class="btn btn-lg btn-outline-danger px-4" @onclick="() => MakeMove(Move.Scissors)">‚úÇÔ∏è Scissors</button>
                            </div>
                        </div>
                    }
                    else if (_winnerMessage != null)
                    {
                        <div class="text-center mt-4">
                            <h3 class="fw-bold text-success mb-3">@_winnerMessage</h3>
                            <button class="btn btn-primary btn-lg" @onclick="ResetGame">Play Again</button>
                        </div>
                    }
                    else
                    {
                        <div class="text-center text-muted py-4">Waiting for opponent's move...</div>
                    }
                </div>
            </div>
        </div>
    </div>
</div>

@code {
    [Parameter] public string RoomId { get; set; } = string.Empty;

    private string _playerName = string.Empty;
    private string _playerAvatar = string.Empty;

    private HubConnection? _hubConnection;
    private bool _isConnected;
    private bool _isOpponentJoined;
    private bool _isRoomFull;
    private bool _opponentLeft;
    private bool _hasPlayerMoved;
    private string? _winnerMessage;

    protected override async Task OnInitializedAsync()
    {
        var uri = NavigationManager.ToAbsoluteUri(NavigationManager.Uri);
        var query = QueryHelpers.ParseQuery(uri.Query);
        _playerName = query["name"];
        _playerAvatar = query["avatar"];
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            _hubConnection = new HubConnectionBuilder()
                .WithUrl(NavigationManager.ToAbsoluteUri("/gamehub"))
                .Build();

            _hubConnection.On("PlayerJoined", async () =>
            {
                _isOpponentJoined = true;
                await JSRuntime.InvokeVoidAsync("playJoinSound");
                await InvokeAsync(StateHasChanged);
            });

            _hubConnection.On<string>("ShowResult", async (msg) =>
            {
                _winnerMessage = msg;
                await InvokeAsync(StateHasChanged);
            });

            _hubConnection.On("RoomFull", async () =>
            {
                _isRoomFull = true;
                await InvokeAsync(StateHasChanged);
                await JSRuntime.InvokeVoidAsync("playGameOverSound");
            });

            _hubConnection.On<string>("OpponentLeft", async (msg) =>
            {
                _opponentLeft = true;
                await InvokeAsync(StateHasChanged);
            });

            _hubConnection.On("ResetGame", async () =>
            {
                Reset();
                await InvokeAsync(StateHasChanged);
            });

            await _hubConnection.StartAsync();
            _isConnected = true;

            await _hubConnection.SendAsync("JoinRoom", RoomId, _playerName);
            await InvokeAsync(StateHasChanged);
        }
    }

    private async Task MakeMove(Move move)
    {
        _hasPlayerMoved = true;
        await _hubConnection.SendAsync("MakeMove", RoomId, move);
    }

    private async Task ResetGame()
    {
        await _hubConnection.SendAsync("Reset", RoomId);
    }

    private void Reset()
    {
        _isRoomFull = false;
        _opponentLeft = false;
        _hasPlayerMoved = false;
        _winnerMessage = null;
    }

    public async ValueTask DisposeAsync()
    {
        if (_hubConnection is not null)
        {
            await _hubConnection.DisposeAsync();
        }
    }
}
