@page "/game/{RoomId}"
@using Microsoft.AspNetCore.SignalR.Client
@using Microsoft.AspNetCore.WebUtilities
@using RockPaperScissorsGame.Models
@rendermode InteractiveWebAssembly
@inject NavigationManager NavigationManager
@inject IJSRuntime JSRuntime
@implements IAsyncDisposable

<h2 class="text-xl font-bold mb-4">Game Room: @RoomId</h2>

@if (!_isConnected)
{
    <p>Connecting...</p>
}
else if (_isRoomFull)
{
    <p>Room is full</p>
}
else if (_opponentLeft)
{
    <p>Opponent has left the game.</p>
}
else if (string.IsNullOrWhiteSpace(_playerName) || string.IsNullOrWhiteSpace(_playerAvatar))
{
    <p>Please provide your name and avatar in the lobby.</p>
}
else if (!_isOpponentJoined)
{
    <p>Waiting for opponent to join...</p>
}
else if (!_hasPlayerMoved)
{
    <div class="text-center space-y-2">
        <p class="text-lg font-medium">Choose your move:</p>
        <button class="btn-move" @onclick="() => MakeMove(Move.Rock)">ü™® Rock</button>
        <button class="btn-move" @onclick="() => MakeMove(Move.Paper)">üìÑ Paper</button>
        <button class="btn-move" @onclick="() => MakeMove(Move.Scissors)">‚úÇÔ∏è Scissors</button>
    </div>
}
else if (_winnerMessage != null)
{
    <div class="mt-4">
        <h3 class="text-2xl font-bold text-green-600">@_winnerMessage</h3>
        <button class="btn-primary mt-2 px-4 py-2 bg-blue-500 text-white rounded" @onclick="ResetGame">Play Again</button>
    </div>
}
else
{
    <p>Waiting for opponent's move...</p>
}

@code {
    [Parameter] public string RoomId { get; set; } = string.Empty;

    private string _playerName = string.Empty;
    private string _playerAvatar = string.Empty;

    private HubConnection? _hubConnection;
    private bool _isConnected;
    private bool _isOpponentJoined;
    private bool _isRoomFull;
    private bool _opponentLeft;
    private bool _hasPlayerMoved;
    private string? _winnerMessage;

    protected override async Task OnInitializedAsync()
    {
        var uri = NavigationManager.ToAbsoluteUri(NavigationManager.Uri);
        var query = QueryHelpers.ParseQuery(uri.Query);
        _playerName = query["name"];
        _playerAvatar = query["avatar"];
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            _hubConnection = new HubConnectionBuilder()
                .WithUrl(NavigationManager.ToAbsoluteUri("/gamehub"))
                .Build();

            _hubConnection.On("PlayerJoined", async () =>
            {
                _isOpponentJoined = true;
                await JSRuntime.InvokeVoidAsync("playJoinSound");
                await InvokeAsync(StateHasChanged);
            });

            _hubConnection.On<string>("ShowResult", async (msg) =>
            {
                _winnerMessage = msg;
                await InvokeAsync(StateHasChanged);
            });

            _hubConnection.On("RoomFull", async () =>
            {
                _isRoomFull = true;
                await InvokeAsync(StateHasChanged);
                await JSRuntime.InvokeVoidAsync("playGameOverSound");
            });

            _hubConnection.On<string>("OpponentLeft", async (msg) =>
            {
                _opponentLeft = true;
                await InvokeAsync(StateHasChanged);
            });

            await _hubConnection.StartAsync();
            _isConnected = true;

            await _hubConnection.SendAsync("JoinRoom", RoomId);
            await InvokeAsync(StateHasChanged);
        }
    }

    private async Task MakeMove(Move move)
    {
        _hasPlayerMoved = true;
        await _hubConnection.SendAsync("MakeMove", RoomId, move);
    }

    private async Task ResetGame()
    {
        _winnerMessage = null;
        _hasPlayerMoved = false;
        await _hubConnection.SendAsync("Reset", RoomId);
    }

    public async ValueTask DisposeAsync()
    {
        if (_hubConnection is not null)
        {
            await _hubConnection.DisposeAsync();
        }
    }
}
